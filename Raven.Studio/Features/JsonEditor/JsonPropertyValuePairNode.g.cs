namespace Raven.Studio.Features.JsonEditor {
    using ActiproSoftware.Text.Parsing;
    using ActiproSoftware.Text.Parsing.Implementation;
    using System;
    using System.Collections.Generic;
    
    
    /// <summary>
    /// Represents a json property value pair.
    /// </summary>
    /// <remarks>
    /// This type was generated by the Actipro Language Designer tool v12.1.561.0 (http://www.actiprosoftware.com).
    /// </remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("LanguageDesigner", "12.1.561.0")]
    public partial class JsonPropertyValuePairNode : AstNodeBase {
        
        /// <summary>
        /// Gets the name.
        /// </summary>
        private JsonStringNode nameValue;
        
        /// <summary>
        /// Gets the value.
        /// </summary>
        private IAstNode valueValue;
        
        /// <summary>
        /// Gets the An integer value that identifies the type of AST node.
        /// </summary>
        /// <value>The An integer value that identifies the type of AST node.</value>
        public override Int32 Id {
            get {
                return JsonAstNodeId.JsonPropertyValuePairNode;
            }
        }
        
        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        /// <value>The name.</value>
        public JsonStringNode Name {
            get {
                return this.nameValue;
            }
            set {
                this.nameValue = value;
            }
        }
        
        /// <summary>
        /// Gets or sets the value.
        /// </summary>
        /// <value>The value.</value>
        public new IAstNode Value {
            get {
                return this.valueValue;
            }
            set {
                this.valueValue = value;
            }
        }
        
        /// <summary>
        /// Retrieves an <c>IEnumerator</c> object that can iterate the child <see cref="IAstNode"/> objects in this node.
        /// </summary>
        /// <returns>An <c>IEnumerator</c> object that can iterate the child <see cref="IAstNode"/> objects in this node.</returns>
        protected override IEnumerator<IAstNode> GetChildrenEnumerator() {
            IEnumerator<IAstNode> baseEnumerator = base.GetChildrenEnumerator();
            if ((baseEnumerator != null)) {
				while (baseEnumerator.MoveNext())
					yield return baseEnumerator.Current;
            }
            if ((this.nameValue != null)) {
				yield return this.nameValue;
            }
            if ((this.valueValue != null)) {
				yield return this.valueValue;
            }
        }
    }
}
