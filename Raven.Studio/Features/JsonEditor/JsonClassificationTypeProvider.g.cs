namespace Raven.Studio.Features.JsonEditor
{
    using ActiproSoftware.Text;
    using ActiproSoftware.Text.Implementation;
    using ActiproSoftware.Windows.Controls.SyntaxEditor.Highlighting;
    using ActiproSoftware.Windows.Controls.SyntaxEditor.Highlighting.Implementation;
    using System.Collections.Generic;
    using System.Windows.Media;


    /// <summary>
    /// Represents a provider of <see cref="IClassificationType"/> objects for the <c>Json</c> language.
    /// </summary>
    /// <remarks>
    /// This type was generated by the Actipro Language Designer tool v12.1.561.0 (http://www.actiprosoftware.com).
    /// </remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("LanguageDesigner", "12.1.561.0")]
    public partial class JsonClassificationTypeProvider : IJsonClassificationTypeProvider
    {
        private IHighlightingStyleRegistry registryValue;

        private IClassificationType delimiterValue;

        private IClassificationType keywordValue;

        private IClassificationType numberValue;

        private IClassificationType operatorValue;

        private IClassificationType stringValue;

        /// <summary>
        /// Initializes a new instance of the <c>JsonClassificationTypeProvider</c> class.
        /// </summary>
        public JsonClassificationTypeProvider() : this(null)
        { }

        /// <summary>
        /// Initializes a new instance of the <c>JsonClassificationTypeProvider</c> class.
        /// </summary>
        /// <param name="targetRegistry">The <see cref="IHighlightingStyleRegistry"/> to use when registering classification types and highlighting styles.</param>
        public JsonClassificationTypeProvider(IHighlightingStyleRegistry targetRegistry)
        {
            if ((targetRegistry != null))
                registryValue = targetRegistry;
            else
                registryValue = AmbientHighlightingStyleRegistry.Instance;
        }

        /// <summary>
        /// Gets the <c>Delimiter</c> classification type.
        /// </summary>
        /// <value>The <c>Delimiter</c> classification type.</value>
        public IClassificationType Delimiter
        {
            get
            {
                if ((delimiterValue == null))
                {
                    var key = "Delimiter";
                    delimiterValue = registryValue.GetClassificationType(key);
                    if ((delimiterValue == null))
                    {
                        delimiterValue = new ClassificationType(key, "Delimiter");
                        registryValue.Register(delimiterValue, new HighlightingStyle());
                    }
                }
                return delimiterValue;
            }
        }

        /// <summary>
        /// Gets the <c>Keyword</c> classification type.
        /// </summary>
        /// <value>The <c>Keyword</c> classification type.</value>
        public IClassificationType Keyword
        {
            get
            {
                if ((keywordValue == null))
                {
                    var key = "Keyword";
                    keywordValue = registryValue.GetClassificationType(key);
                    if ((keywordValue == null))
                    {
                        keywordValue = new ClassificationType(key, "Keyword");
                        registryValue.Register(keywordValue,
                            new HighlightingStyle(new SolidColorBrush(Color.FromArgb(255, 0, 0, 255)), null, null,null, HighlightingStyleLineStyle.Default));
                    }
                }
                return keywordValue;
            }
        }

        /// <summary>
        /// Gets the <c>Number</c> classification type.
        /// </summary>
        /// <value>The <c>Number</c> classification type.</value>
        public IClassificationType Number
        {
            get
            {
                if ((numberValue == null))
                {
                    var key = "Number";
                    numberValue = registryValue.GetClassificationType(key);
                    if ((numberValue == null))
                    {
                        numberValue = new ClassificationType(key, "Number");
                        registryValue.Register(numberValue, new HighlightingStyle());
                    }
                }

                return numberValue;
            }
        }

        /// <summary>
        /// Gets the <c>Operator</c> classification type.
        /// </summary>
        /// <value>The <c>Operator</c> classification type.</value>
        public IClassificationType Operator
        {
            get
            {
                if ((operatorValue == null))
                {
                    var key = "Operator";
                    operatorValue = registryValue.GetClassificationType(key);
                    if ((operatorValue == null))
                    {
                        operatorValue = new ClassificationType(key, "Operator");
                        registryValue.Register(operatorValue, new HighlightingStyle());
                    }
                }

                return operatorValue;
            }
        }

        /// <summary>
        /// Gets the <c>String</c> classification type.
        /// </summary>
        /// <value>The <c>String</c> classification type.</value>
        public IClassificationType String
        {
            get
            {
                if ((stringValue == null))
                {
                    var key = "String";
                    stringValue = registryValue.GetClassificationType(key);
                    if ((stringValue == null))
                    {
                        stringValue = new ClassificationType(key, "String");
                        registryValue.Register(this.stringValue,
                            new HighlightingStyle(new SolidColorBrush(Color.FromArgb(255, 128, 0, 0)), null, null, null, HighlightingStyleLineStyle.Default));
                    }
                }

                return stringValue;
            }
        }

        /// <summary>
        /// Gets the <see cref="IHighlightingStyleRegistry"/> to use when registering classification types and highlighting styles.
        /// </summary>
        /// <value>The <see cref="IHighlightingStyleRegistry"/> to use when registering classification types and highlighting styles.</value>
        public IHighlightingStyleRegistry Registry
        {
            get { return registryValue; }
        }

        /// <summary>
        /// Registers all classification types and highlighting styles with the <see cref="IHighlightingStyleRegistry"/> used by this class.
        /// </summary>
        /// <returns>The collection of <see cref="IClassificationType"/> objects that were registered.</returns>
        public IEnumerable<IClassificationType> RegisterAll()
        {
            return new[]
            {
                Delimiter,
                Keyword,
                Number,
                Operator,
                String
            };
        }
    }
}