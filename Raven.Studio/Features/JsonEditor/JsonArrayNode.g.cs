namespace Raven.Studio.Features.JsonEditor {
    using ActiproSoftware.Text.Parsing;
    using ActiproSoftware.Text.Parsing.Implementation;
    using System;
    using System.Collections.Generic;
    
    
    /// <summary>
    /// Represents a json array.
    /// </summary>
    /// <remarks>
    /// This type was generated by the Actipro Language Designer tool v12.1.561.0 (http://www.actiprosoftware.com).
    /// </remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("LanguageDesigner", "12.1.561.0")]
    public partial class JsonArrayNode : AstNodeBase {
        
        /// <summary>
        /// Gets the values.
        /// </summary>
        private IList<IAstNode> valuesValue;
        
        /// <summary>
        /// Gets the An integer value that identifies the type of AST node.
        /// </summary>
        /// <value>The An integer value that identifies the type of AST node.</value>
        public override Int32 Id {
            get {
                return JsonAstNodeId.JsonArrayNode;
            }
        }
        
        /// <summary>
        /// Gets the values.
        /// </summary>
        /// <value>The values.</value>
        public IList<IAstNode> Values {
            get {
                if ((this.valuesValue == null)) {
                    this.valuesValue = new List<IAstNode>();
                }
                return this.valuesValue;
            }
        }
        
        /// <summary>
        /// Returns whether the <see cref="Values"/> collection property contains at least one item.
        /// </summary>
        /// <value><c>true</c> if there is at least one item in the collection; otherwise, <c>false</c>.</value>
        public Boolean HasValues {
            get {
                if (((this.valuesValue != null) 
                            && (this.valuesValue.Count > 0))) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        /// <summary>
        /// Retrieves an <c>IEnumerator</c> object that can iterate the child <see cref="IAstNode"/> objects in this node.
        /// </summary>
        /// <returns>An <c>IEnumerator</c> object that can iterate the child <see cref="IAstNode"/> objects in this node.</returns>
        protected override IEnumerator<IAstNode> GetChildrenEnumerator() {
            IEnumerator<IAstNode> baseEnumerator = base.GetChildrenEnumerator();
            if ((baseEnumerator != null)) {
				while (baseEnumerator.MoveNext())
					yield return baseEnumerator.Current;
            }
            if ((this.valuesValue != null)) {
				foreach (IAstNode valuesValueItem in this.valuesValue)
					if (valuesValueItem != null) yield return valuesValueItem;
            }
        }
    }
}
