namespace Raven.Studio.Features.JsonEditor {
    using ActiproSoftware.Text.Lexing.Implementation;
    using System;
    using System.ComponentModel;
    using System.Reflection;
    
    
    /// <summary>
    /// Contains the token IDs for the <c>Json</c> language.
    /// </summary>
    /// <remarks>
    /// This type was generated by the Actipro Language Designer tool v12.1.561.0 (http://www.actiprosoftware.com).
    /// </remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("LanguageDesigner", "12.1.561.0")]
    public partial class JsonTokenId : TokenIdProviderBase {
        
        /// <summary>
        /// Gets the <c>Whitespace</c> token ID.
        /// </summary>
        public const Int32 Whitespace = 1;
        
        /// <summary>
        /// Gets the <c>Comma</c> token ID.
        /// </summary>
        public const Int32 Comma = 2;
        
        /// <summary>
        /// Gets the <c>Colon</c> token ID.
        /// </summary>
        public const Int32 Colon = 3;
        
        /// <summary>
        /// Gets the <c>OpenCurlyBrace</c> token ID.
        /// </summary>
        public const Int32 OpenCurlyBrace = 4;
        
        /// <summary>
        /// Gets the <c>CloseCurlyBrace</c> token ID.
        /// </summary>
        public const Int32 CloseCurlyBrace = 5;
        
        /// <summary>
        /// Gets the <c>OpenSquareBrace</c> token ID.
        /// </summary>
        public const Int32 OpenSquareBrace = 6;
        
        /// <summary>
        /// Gets the <c>CloseSquareBrace</c> token ID.
        /// </summary>
        public const Int32 CloseSquareBrace = 7;
        
        /// <summary>
        /// Gets the <c>True</c> token ID.
        /// </summary>
        public const Int32 True = 8;
        
        /// <summary>
        /// Gets the <c>False</c> token ID.
        /// </summary>
        public const Int32 False = 9;
        
        /// <summary>
        /// Gets the <c>Null</c> token ID.
        /// </summary>
        public const Int32 Null = 10;
        
        /// <summary>
        /// Gets the <c>Number</c> token ID.
        /// </summary>
        public const Int32 Number = 11;
        
        /// <summary>
        /// Gets the <c>PrimaryStringText</c> token ID.
        /// </summary>
        public const Int32 PrimaryStringText = 12;
        
        /// <summary>
        /// Gets the <c>StringStartDelimiter</c> token ID.
        /// </summary>
        public const Int32 StringStartDelimiter = 13;
        
        /// <summary>
        /// Gets the <c>StringEndDelimiter</c> token ID.
        /// </summary>
        public const Int32 StringEndDelimiter = 14;
        
        /// <summary>
        /// Gets the <c>EscapedCharacter</c> token ID.
        /// </summary>
        public const Int32 EscapedCharacter = 15;
        
        /// <summary>
        /// Gets the <c>EscapedUnicode</c> token ID.
        /// </summary>
        public const Int32 EscapedUnicode = 16;
        
        /// <summary>
        /// Gets the <c>StringText</c> token ID.
        /// </summary>
        public const Int32 StringText = 17;
        
        /// <summary>
        /// Gets the minimum token ID returned by this provider.
        /// </summary>
        /// <value>The minimum token ID returned by this provider.</value>
        public override Int32 MinId {
            get {
                return 1;
            }
        }
        
        /// <summary>
        /// Gets the maximum token ID returned by this provider.
        /// </summary>
        /// <value>The maximum token ID returned by this provider.</value>
        public override Int32 MaxId {
            get {
                return 17;
            }
        }
        
        /// <summary>
        /// Returns whether the specified ID value is valid for this token ID provider.
        /// </summary>
        /// <param name="id">The token ID to examine.</param>
        /// <returns><c>true</c> if the ID value is valid; otherwise, <c>false</c></returns>
        public override Boolean ContainsId(Int32 id) {
            return ((id >= MinId) 
                        && (id <= MaxId));
        }
        
        /// <summary>
        /// Returns the actual string representation for the specified token ID.
        /// </summary>
        /// <param name="id">The token ID to examine.</param>
        /// <returns>The actual string representation for the specified token ID.</returns>
        public override String GetDescription(Int32 id) {
            FieldInfo[] fields = typeof(JsonTokenId).GetFields((BindingFlags.Public | BindingFlags.Static));
            for (Int32 index = 0; (index < fields.Length); index = (index + 1)) {
                FieldInfo field = fields[index];
                if (id.Equals(field.GetValue(null))) {
                    Object[] customAttributes = field.GetCustomAttributes(typeof(DescriptionAttribute), false);
                    if (((customAttributes != null) 
                                && (customAttributes.Length > 0))) {
                        return ((DescriptionAttribute)(customAttributes[0])).Description;
                    }
                    else {
                        return field.Name;
                    }
                }
            }
            return null;
        }
        
        /// <summary>
        /// Returns the string-based key for the specified token ID.
        /// </summary>
        /// <param name="id">The token ID to examine.</param>
        /// <returns>The string-based key for the specified token ID.</returns>
        public override String GetKey(Int32 id) {
            FieldInfo[] fields = typeof(JsonTokenId).GetFields((BindingFlags.Public | BindingFlags.Static));
            for (Int32 index = 0; (index < fields.Length); index = (index + 1)) {
                FieldInfo field = fields[index];
                if (id.Equals(field.GetValue(null))) {
                    return field.Name;
                }
            }
            return null;
        }
        
        /// <summary>
        /// Returns whether the specified ID value is part of the <c>Delimiter</c>.
        /// </summary>
        /// <param name="id">The token ID to examine.</param>
        /// <returns><c>true</c> if the ID value is in the classification type; otherwise, <c>false</c></returns>
        public static Boolean IsDelimiterClassificationType(Int32 id) {
            return ((id >= Comma) 
                        && (id <= CloseSquareBrace));
        }
        
        /// <summary>
        /// Returns whether the specified ID value is part of the <c>Keyword</c>.
        /// </summary>
        /// <param name="id">The token ID to examine.</param>
        /// <returns><c>true</c> if the ID value is in the classification type; otherwise, <c>false</c></returns>
        public static Boolean IsKeywordClassificationType(Int32 id) {
            return ((id >= True) 
                        && (id <= Null));
        }
        
        /// <summary>
        /// Returns whether the specified ID value is part of the <c>Number</c>.
        /// </summary>
        /// <param name="id">The token ID to examine.</param>
        /// <returns><c>true</c> if the ID value is in the classification type; otherwise, <c>false</c></returns>
        public static Boolean IsNumberClassificationType(Int32 id) {
            return (id == Number);
        }
        
        /// <summary>
        /// Returns whether the specified ID value is part of the <c>String</c>.
        /// </summary>
        /// <param name="id">The token ID to examine.</param>
        /// <returns><c>true</c> if the ID value is in the classification type; otherwise, <c>false</c></returns>
        public static Boolean IsStringClassificationType(Int32 id) {
            return (id == PrimaryStringText);
        }
    }
}
